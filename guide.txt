1) Ketik perintah di console :
   npm init -y 
   jika ada error Cannot find module 'init-package-json', maka ketik perintah ini:
   -  npm install npm -g
   -  npm install
   -  npm init -y
2) install semua dependency, ini bisa dicopy dari project sebelumnya di file package.json, kemudian ketik perintah :
   -  npm install
   jika tidak, maka kita install manual, seperti:
   -  npm install bcrypt cloudinary cors dotenv express jsonwebtoken mongoose mongoose-unique-validator multer multer-storage-cloudinary nodemon
3) buat project dan cluster di https://cloud.mongodb.com/v2/5f8569ad44b2ff464016866d#security/database/users
4) buat file app.js berikut kodenya :
const express = require('express');

const app = express();
const dotenv = require('dotenv');
dotenv.config();

const cors = require('cors');
const mongoose = require('mongoose');

// parser
app.use(express.json());
app.use(express.urlencoded({extended:false}))

//cors
app.use(cors());

// db config
const mongoURI = process.env.MONGO_URI;
mongoose.Promise = global.Promise;
const options = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useFindAndModify: false,
    };
mongoose.connect(mongoURI, options);

const db = mongoose.connection;
db.on("error", console.error.bind(console,"Connection Error"));
db.once("open", () => console.log("Connected to mongodb!"));

// routes
const studentRoutes = require("./routes/student");
const errorHandler = require("./middlewares/errorHandler");

app.use("/api/v1/student", studentRoutes);
app.use(errorHandler);

// server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Listening to ${PORT}`));

5) Buat file .env, yang isinya :
   PORT=3000
   SALT_ROUND=5
   MONGO_URI=mongodb+srv://yourusername:yourpassword@cluster0.3vc0m.mongodb.net/yourdbname?retryWrites=true&w=majority

6) buat folder models dan file student.js di dalamnya, berikut kodenya :
const { encryptPassword } = require("../helpers/bcrypt");
const mongoose = require('mongoose');
const { Schema } = mongoose;

const studentSchema = new Schema(
    {
        username: {
            type: String,
            required: true,
            lowercase: true,
            trim: true
        },
      password: {
        type: String,
        required: true,
        match: [
        /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
        "Password minimum eight characters, at least one letter and one number",
        ],
      },
        profile: { type: Schema.Types.ObjectId, ref: "Profile"},
    },
      {timestamps: true, versionKey:false}
);

const student = mongoose.model("Student",studentSchema);

exports.Student = student;

7) Buat controllers dan buat student.js di dalamnya, berikut kodenya :
const { Student } = require("../models/student");

const { decryptPassword } = require("../helpers/bcrypt");
const { tokenGenerator } = require("../helpers/jwt");

exports.Register = async (req, res, next) => {
  try {
    let data = await Student.create(req.body);

    res.status(201).json({
      success: true,
      message: "Successfully create a student!",
      data,
    });
  } catch (err) {
    next(err);
  }
};

8) Buat folder middlewares berisi file errorHandler.js, yang isinya sebagai berikut:
module.exports = (err, req, res, next) => {
    if (err) {
        if (err.status) {
            res.status(err.status).json({
                success: false,
                message: err.message,                
            });            
        } else if(err.response && err.response.data) {
            res.status(400).json({
                success: false,
                message: err.response.data.error,                
            });            
        } else {
            res.status(400).json({
                success: false,
                message: err.message,                
            });
        }
    }
}

9) Buat folder helpers, yang berisi file bcrypt.js, kodenya sebagai berikut:
// Jangan lupa tambahkan SALT_ROUND pada env.
const bcrypt = require('bcrypt');
const saltRound = Number(process.env.SALT_ROUND);

const encryptPassword = (password) => bcrypt.hash(password,saltRound);
const decryptPassword = (password, userPassword) => bcrypt.compare(password, userPassword);

module.exports = {
    encryptPassword,
    decryptPassword
}

10) Tambahkan SALT_ROUND pada file .env
    SALT_ROUND=10

11)Tambahkan kode ini pada models (student.js)

// pre, post hooks
    studentSchema.pre("save", async function(next){
    let student = this;

    if(student.password && student.isModified("password")){
       student.password = await encryptPassword(student.password) 
    }
    next();
});

12) Buat file jwt.js di folder helpers, berikut scriptnya :
	// Jangan lupa tambahkan SECRET_KEY pada file .env
const jwt = require('jsonwebtoken');
const secretKey = process.env.SECRET_KEY;

const tokenGenerator = (user)=>{
    const { _id, username } = user;

    return jwt.sign(
        {
            _id,
            username,
        },
        secretKey
    );
}

const tokenVerifier = (token) => {
    return jwt.verify(token, secretKey);
}

module.exports = {
    tokenGenerator,
    tokenVerifier
}
 
13) Buat folder routes dan buat file student.js berikut kodenya :
const express = require("express");
const router = express.Router();

const studentControllers = require("../controllers/student");
const { Authentication } = require("../middlewares/auth");

router.post("/register", studentControllers.Register);

module.exports = router;

14) Tambahkan script login pada controller, berikut scriptnya :
	//Jangan lupa tambahkan ini di bagian atas deklarasi
	const { decryptPassword } = require('../helpers/bcrypt');
	const { tokenGenerator } = require('../helpers/jwt');
	
	//Script controller login

exports.Login = async (req, res, next) => {
    try{
        const { username, password } = req.body;
        let student = await Student.findOne({
            username:username
        });
        if(!student)
            return next({
                message: `Student with username: ${username} is not found`
            })
        if(decryptPassword(password, student.password)){
            const token = tokenGenerator(student);
            
            res.status(200).json({
                success: true,
                message: "Successfully logged in",
                token: token
            });
        }
    } catch (err){
        next(err);
    }
}

15) Tambahkan /login pada file routes student.js.
Berikut scriptnya :
router.post("/login", studentControllers.Login);

16) Buat middlewares/auth.js, berikut kodenya:
const {tokenVerifier} = require('../helpers/jwt');

exports.Authentication = (req, res, next)=>{
    const token = req.headers.Authentication;

    if(!token) {
        res.status(400).json({
            success: false,
            message: "Token is not found",
        });        
    } else {
        try{
            const decoded = tokenVerifier(token);
            req.userData = decoded;
        } catch(err) {
            next(err);
        }
    }
}
17) Tambahkan kode pada route student.js, berikut ini:

const { Authentication } = require("../middlewares/auth"); // pada bagian atas
router.post("/", Authentication, studentControllers.GetAll); // sebelum module.exports = router;

18) Tambahkan kode pada controller student.js untuk GetAll, berikut kodenya:
exports.GetAll = async(req,res,next)=> {
  try{
    let students = await Student.find();
    res.status(200).json({
      success: true,
      message: "Successfully retrieve the data",
      data: students
    })
  } catch(err){
    next(err);
  }
}

19) 